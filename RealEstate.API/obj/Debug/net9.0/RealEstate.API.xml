<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RealEstate.API</name>
    </assembly>
    <members>
        <member name="T:RealEstate.API.Controllers.CategoriesController">
            <summary>
            Controller  Categories
            </summary>
        </member>
        <member name="M:RealEstate.API.Controllers.CategoriesController.GetAllCategories(RealEstate.Application.Common.Pagination.PaginationRequest,System.String)">
            <summary>
            Retrieves all categories with pagination.
            </summary>
            <param name="pagination">Pagination parameters (page number and page size).</param>
            <param name="CategoryName">Optional category name filter.</param>
            <returns>Paginated list of categories.</returns>
            <response code="200">Returns the categories list.</response>
            <response code="400">If the pagination parameters are invalid.</response>
        </member>
        <member name="M:RealEstate.API.Controllers.CategoriesController.GetCategoryById(System.Guid)">
            <summary>
            Retrieves a specific category by its unique identifier.
            </summary>
            <param name="categoryId">The unique GUID identifier of the category.</param>
            <returns>Category details including properties and subcategories.</returns>
            <response code="200">Successfully returned the category details.</response>
            <response code="404">Category with specified ID was not found.</response>
        </member>
        <member name="M:RealEstate.API.Controllers.CategoriesController.GetCategoryByName(System.String)">
            <summary>
            Retrieves a specific category by name.
            </summary>
            <param name="categoryName">The exact name of the category.</param>
            <returns>Category details including properties and subcategories.</returns>
            <response code="200">Successfully returned the category details.</response>
            <response code="404">Category with specified name was not found.</response>
        </member>
        <member name="M:RealEstate.API.Controllers.CategoriesController.CreateCategory(RealEstate.Application.Dtos.Category.CreateUpdateCategoryDTO)">
            <summary>
            Creates a new category.
            </summary>
            <param name="categoryData">Category creation data.</param>
            <returns>Returns the ID of the newly created category.</returns>
            <response code="201">Category successfully created.</response>
            <response code="400">Invalid input data or validation errors.</response>
            <response code="409">Category with same name already exists.</response>
        </member>
        <member name="M:RealEstate.API.Controllers.CategoriesController.UpdateCategory(System.Guid,RealEstate.Application.Dtos.Category.CreateUpdateCategoryDTO)">
            <summary>
            Updates an existing category.
            </summary>
            <param name="categoryId">The ID of the category to update.</param>
            <param name="categoryData">Updated category data.</param>
            <returns>No content if successful.</returns>
            <response code="204">Category successfully updated.</response>
            <response code="400">Invalid input data or validation errors.</response>
            <response code="404">Category not found.</response>
            <response code="409">Category name already exists (conflict).</response>
        </member>
        <member name="M:RealEstate.API.Controllers.CategoriesController.DeleteCategory(System.Guid)">
            <summary>
            Deletes a category by its unique ID (soft delete).
            </summary>
            <param name="categoryId">The ID of the category to delete.</param>
            <returns>No content if successful.</returns>
            <response code="204">Category successfully deleted.</response>
            <response code="400">Invalid input ID.</response>
            <response code="404">Category not found.</response>
        </member>
        <member name="T:RealEstate.API.Controllers.CustomersController">
            <summary>
            Controller for managing customer operations
            </summary>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.#ctor(MediatR.ISender)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.GetAllCustomers(RealEstate.Application.Common.Pagination.PaginationRequest,RealEstate.Application.Dtos.CustomerDTO.FiltterCustomersDTO)">
            <summary>
            Get all customers with filtering and pagination capabilities
            </summary>
            <param name="pagination">Pagination parameters</param>
            <param name="filtter">Customer filtering parameters</param>
            <returns>List of customers matching the criteria</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.GetLatestCustomers(System.Int32)">
            <summary>
            Get latest customers (Top 5)
            </summary>
            <param name="count">Optional: number of customers to retrieve (default is 5)</param>
            <returns>List of latest customers</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.GetBuyers(RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Get all buyers
            </summary>
            <param name="pagination">Pagination parameters</param>
            <returns>List of buyers</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.GetRenters(RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Get all renters
            </summary>
            <param name="pagination">Pagination parameters</param>
            <returns>List of renters</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.GetOwners(RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Get all owners
            </summary>
            <param name="pagination">Pagination parameters</param>
            <returns>List of owners</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.GetCustomerById(System.Guid)">
            <summary>
            Get a specific customer by ID
            </summary>
            <param name="CustomerId">The customer's unique identifier</param>
            <returns>Customer details</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.GetCustomerByNationalId(System.String)">
            <summary>
            Get customer by national ID
            </summary>
            <param name="NationalId">The customer's national ID</param>
            <returns>Customer details</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.CheckCustomerExists(System.String)">
            <summary>
            Check if a customer exists with the given national ID
            </summary>
            <param name="nationalId">The national ID to check</param>
            <returns>Boolean indicating existence</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.CreateCustomer(RealEstate.Application.Dtos.Customer.CreateCustomerDTO)">
            <summary>
            Create a new customer
            </summary>
            <param name="command">Customer creation data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The ID of the newly created customer</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.UpdateCustomer(System.Guid,RealEstate.Application.Dtos.Customer.UpdateCustomerDTO,System.Threading.CancellationToken)">
            <summary>
            Update an existing customer
            </summary>
            <param name="customerId">The ID of the customer to update</param>
            <param name="command">Updated customer data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>No content if successful</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.DeleteCustomer(System.Guid)">
            <summary>
            Delete a customer
            </summary>
            <param name="CustomerId">The ID of the customer to delete</param>
            <returns>No content if successful</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.CustomersController.GetCustomersCount">
            <summary>
            Get the total count of customers
            </summary>
            <returns>Total customer count</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.RentalsController.GetAllRentals(RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Retrieves all Rentals with pagination.
            </summary>
            <param name="pagination">Pagination parameters (PageNumber, PageSize)</param> 
            <returns>A paginated list of Rentals.</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.RentalsController.GetRentalById(System.Guid)">
            <summary>
            Retrieves a single Rental by its unique ID.
            </summary>
            <param name="RentalId">The ID of the Rental</param>
            <returns>The matched Rental if found</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.RentalsController.CreateRental(RealEstate.Application.Dtos.Rental.CreateRentalDTO)">
            <summary>
            Creates a new Rental.
            </summary>
            <param name="RentalData">The Rental data to create</param>
            <returns>The created Rental's ID</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.SalesController.GetAllSales(RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Retrieves all Sales with pagination.
            </summary>
            <param name="pagination">Pagination parameters (PageNumber, PageSize)</param> 
            <returns>A paginated list of sales.</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.SalesController.GetSaleById(System.Guid)">
            <summary>
            Retrieves a single Sale by its unique ID.
            </summary>
            <param name="SaleId">The ID of the Sale</param>
            <returns>The matched Sale if found</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.SalesController.CreateSale(RealEstate.Application.Dtos.Sales.CreateSaleDTO)">
            <summary>
            Creates a new sale.
            </summary>
            <param name="saleData">The sale data to create</param>
            <returns>The created sale's ID</returns>
        </member>
        <member name="M:RealEstate.API.Controllers.TestimonialsController.GetAllTestimonials(RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Retrieves all Testimonials with pagination
            </summary>
            <param name="pagination">Pagination parameters (page number and page size)</param>
            <returns>Paginated list of Testimonials</returns>
            <response code="200">Returns the Testimonials list</response>
            <response code="400">If the pagination parameters are invalid</response>
        </member>
        <member name="T:RealEstate.API.Transformers.CustomAspNetCoreResultEndpointProfile">
            <summary>
            Transforms FluentResults failures into ProblemDetails responses for ASP.NET Core APIs.
            Handles specific error types like NotFoundError and ValidationError with appropriate HTTP status codes.
            </summary>
        </member>
        <member name="T:PropertiesController">
            <summary>
            Controller for managing real estate property operations including
            creation, retrieval, updating, and deletion of properties
            </summary>
        </member>
        <member name="M:PropertiesController.#ctor(MediatR.IMediator,FluentValidation.IValidator{RealEstate.Application.Features.Propertys.Commands.Update.UpdatePropertyCommand})">
            <summary>
            Initializes a new instance of the PropertiesController
            </summary>
            <param name="mediator">Mediator for handling CQRS patterns</param>
            <param name="validator">Validator for update property commands</param>
        </member>
        <member name="M:PropertiesController.GetAllProperties(RealEstate.Application.Common.Pagination.PaginationRequest,RealEstate.Application.Dtos.Property.FilterPropertiesDTO)">
            <summary>
            Retrieves all properties with optional filtering and pagination
            </summary>
            <param name="pagination">Pagination configuration (page number and size)</param>
            <param name="filter">Optional filters for property search</param>
            <returns>Paginated list of property DTOs</returns>
        </member>
        <member name="M:PropertiesController.GetFeaturedPropertiesTop7">
            <summary>
            Retrieves the top 7 featured properties
            </summary>
            <returns>List of featured property DTOs</returns>
        </member>
        <member name="M:PropertiesController.GetLatestTop7Properties">
            <summary>
            Retrieves the latest 7 added properties
            </summary>
            <returns>List of recently added property DTOs</returns>
        </member>
        <member name="M:PropertiesController.GetPropertyById(System.Guid)">
            <summary>
            Retrieves a property by its unique identifier
            </summary>
            <param name="propertyId">The GUID of the property to retrieve</param>
            <returns>Property DTO if found</returns>
        </member>
        <member name="M:PropertiesController.GetPropertyByNumber(System.String)">
            <summary>
            Retrieves a property by its property number
            </summary>
            <param name="propertyNumber">The unique property number</param>
            <returns>Property DTO if found</returns>
        </member>
        <member name="M:PropertiesController.GetPropertiesByNationalId(RealEstate.Application.Common.Pagination.PaginationRequest,System.String)">
            <summary>
            Retrieves properties owned by a specific owner using national ID
            </summary>
            <param name="pagination">Pagination configuration</param>
            <param name="nationalId">Owner's national identification number</param>
            <returns>Paginated list of owner's properties</returns>
        </member>
        <member name="M:PropertiesController.GetOwnerPropertiesById(System.Guid,RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Retrieves properties owned by a specific owner using owner ID
            </summary>
            <param name="OwnerId">The GUID of the property owner</param>
            <param name="pagination">Pagination configuration</param>
            <returns>Paginated list of owner's properties</returns>
        </member>
        <member name="M:PropertiesController.GetPropertiesByCategory(System.Guid,RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Retrieves properties by category ID
            </summary>
            <param name="CategoryId">The GUID of the property category</param>
            <param name="pagination">Pagination configuration</param>
            <returns>Paginated list of properties in category</returns>
        </member>
        <member name="M:PropertiesController.GetPropertiesByStatus(System.String,RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Retrieves properties by status (e.g., "ForSale", "Rented")
            </summary>
            <param name="status">The status filter value</param>
            <param name="pagination">Pagination configuration</param>
            <returns>Paginated list of properties with matching status</returns>
        </member>
        <member name="M:PropertiesController.GetPropertiesByLocation(System.String,RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Retrieves properties by location
            </summary>
            <param name="location">The location search string</param>
            <param name="pagination">Pagination configuration</param>
            <returns>Paginated list of properties in location</returns>
        </member>
        <member name="M:PropertiesController.GetPropertiesCount">
            <summary>
            Retrieves the total count of properties
            </summary>
            <returns>Object containing the count of properties</returns>
        </member>
        <member name="M:PropertiesController.GetPropertiesByPriceRange(System.Nullable{System.Int32},System.Nullable{System.Int32},RealEstate.Application.Common.Pagination.PaginationRequest)">
            <summary>
            Retrieves properties within a specified price range
            </summary>
            <param name="minPrice">Minimum price filter (optional)</param>
            <param name="maxPrice">Maximum price filter (optional)</param>
            <param name="pagination">Pagination configuration</param>
            <returns>Paginated list of properties in price range</returns>
        </member>
        <member name="M:PropertiesController.CreatePropertie(RealEstate.Application.Dtos.Property.CreatePropertyDTO)">
            <summary>
            Creates a new property listing
            </summary>
            <param name="propertyData">Property creation data transfer object</param>
            <returns>Created response with new property ID</returns>
        </member>
        <member name="M:PropertiesController.UpdatePropertie(System.Guid,RealEstate.Application.Dtos.Property.UpdatePropertyDTO)">
            <summary>
            Updates an existing property listing
            </summary>
            <param name="propertyId">The GUID of the property to update</param>
            <param name="propertyData">Property update data transfer object</param>
            <returns>No content response if successful</returns>
        </member>
        <member name="M:PropertiesController.UpdatePropertyToRented(System.Guid)">
            <summary>
            Updates a property's status to "Rented"
            </summary>
            <param name="propertyId">The GUID of the property to update</param>
            <returns>Updated property DTO</returns>
        </member>
        <member name="M:PropertiesController.UpdatePropertyToSold(System.Guid)">
            <summary>
            Updates a property's status to "Sold"
            </summary>
            <param name="propertyId">The GUID of the property to update</param>
            <returns>Updated property DTO</returns>
        </member>
        <member name="M:PropertiesController.DeleteProperty(System.Guid)">
            <summary>
            Deletes a property by its ID
            </summary>
            <param name="propertyId">The GUID of the property to delete</param>
            <returns>Deleted property ID</returns>
        </member>
    </members>
</doc>
